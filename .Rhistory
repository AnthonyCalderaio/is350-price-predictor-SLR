setwd("~/Desktop/projects/Machine Learning A-Z (Codes and Datasets)/Part 2 - Regression")
numVars = length(x)
ination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
dataset = read_excel('50_Startups.csv')
library(readxl)
dataset = read_excel('50_Startups.csv')
dataset = read_excel('/50_Startups.csv')
setwd("~/Desktop/projects/Machine Learning A-Z (Codes and Datasets)/Part 2 - Regression/Section 5 - Multiple Linear Regression/R")
dataset = read_excel('50_Startups.csv')
dataset = read('50_Startups.csv')
dataset = read_csv('50_Startups.csv')
library(openxlsx)
50_Startups <- read.csv("~/Desktop/projects/Machine Learning A-Z (Codes and Datasets)/Part 2 - Regression/Section 5 - Multiple Linear Regression/R/50_Startups.csv")
dataset = read_csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
View(dataset)
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
# for (i in c(1:numVars)){
#   regressor = lm(formula = Profit ~ ., data = x)
#   maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
#   if (maxVar > sl){
#     j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
#     x = x[, -j]
#   }
#   numVars = numVars - 1
# }
# return(summary(regressor))
}
View(backwardElimination)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
setwd("~/Desktop/Code/Machine Learning Projects/CarModels-SLR")
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
summary(regressor)
# Predict
# y_pred = predict(regressor, newdata = tes)
summary(regressor)
View(regressor)
View(regressor)
summary(regressor)
summary(regressor)
View(dataset)
summary(regressor)
View(dataset)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
summary(regressor)
# Predict
# y_pred = predict(regressor, newdata = tes)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
summary(regressor)
# Predict
# y_pred = predict(regressor, newdata = tes)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
# summary(regressor)
# Predict
y_pred = predict(regressor, newdata = tes)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
# summary(regressor)
# Predict
# y_pred = predict(regressor, newdata = tes)
# install.packages("readxl")
library(readxl)
dataset = read_excel('is300_cars.xlsx')
# install.packages("caTools")
library(caTools)
set.seed(123)
# Split dataset
split = sample.split(dataset$Cost, SplitRatio = 2/3)
# Training set from split items that are TRUE
training_set = subset(dataset, split == TRUE)
# Test set from split items that are FALSE
test_set = subset(dataset, split == FALSE)
# Train the model. Formula is Cost depends on all other features
regressor = lm(formula = Cost ~ ., data = training_set)
# summary(regressor)
# Predict
# y_pred = predict(regressor, newdata = tes)
summary(regressor)
View(test_set)
View(training_set)
View(test_set)
View(training_set)
